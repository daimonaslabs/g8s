/*
Copyright 2024 James Riley O'Donnell.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/jrodonnell/g8s/pkg/controller/apis/api.g8s.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SelfSignedTLSBundleLister helps list SelfSignedTLSBundles.
// All objects returned here must be treated as read-only.
type SelfSignedTLSBundleLister interface {
	// List lists all SelfSignedTLSBundles in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SelfSignedTLSBundle, err error)
	// SelfSignedTLSBundles returns an object that can list and get SelfSignedTLSBundles.
	SelfSignedTLSBundles(namespace string) SelfSignedTLSBundleNamespaceLister
	SelfSignedTLSBundleListerExpansion
}

// selfSignedTLSBundleLister implements the SelfSignedTLSBundleLister interface.
type selfSignedTLSBundleLister struct {
	indexer cache.Indexer
}

// NewSelfSignedTLSBundleLister returns a new SelfSignedTLSBundleLister.
func NewSelfSignedTLSBundleLister(indexer cache.Indexer) SelfSignedTLSBundleLister {
	return &selfSignedTLSBundleLister{indexer: indexer}
}

// List lists all SelfSignedTLSBundles in the indexer.
func (s *selfSignedTLSBundleLister) List(selector labels.Selector) (ret []*v1alpha1.SelfSignedTLSBundle, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SelfSignedTLSBundle))
	})
	return ret, err
}

// SelfSignedTLSBundles returns an object that can list and get SelfSignedTLSBundles.
func (s *selfSignedTLSBundleLister) SelfSignedTLSBundles(namespace string) SelfSignedTLSBundleNamespaceLister {
	return selfSignedTLSBundleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SelfSignedTLSBundleNamespaceLister helps list and get SelfSignedTLSBundles.
// All objects returned here must be treated as read-only.
type SelfSignedTLSBundleNamespaceLister interface {
	// List lists all SelfSignedTLSBundles in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SelfSignedTLSBundle, err error)
	// Get retrieves the SelfSignedTLSBundle from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SelfSignedTLSBundle, error)
	SelfSignedTLSBundleNamespaceListerExpansion
}

// selfSignedTLSBundleNamespaceLister implements the SelfSignedTLSBundleNamespaceLister
// interface.
type selfSignedTLSBundleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SelfSignedTLSBundles in the indexer for a given namespace.
func (s selfSignedTLSBundleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SelfSignedTLSBundle, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SelfSignedTLSBundle))
	})
	return ret, err
}

// Get retrieves the SelfSignedTLSBundle from the indexer for a given namespace and name.
func (s selfSignedTLSBundleNamespaceLister) Get(name string) (*v1alpha1.SelfSignedTLSBundle, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("selfsignedtlsbundle"), name)
	}
	return obj.(*v1alpha1.SelfSignedTLSBundle), nil
}
